haskell argument destructuring and pattern matching example:
head2 (x:_) = x

note: _ means 'anything', '()' is used to do destructuring here
     (x : _) also implies only when a list contains at least one element, it matches this expression -> so, if 'head2 []' it will fail and produces an error. 

add x y = x + y

note: it means (add x) y, where (add x) is a function accepting y
? how to write in lambda form?

head2 :: [a] -> a
note: it defines function's type, ? what's the purpose?

splitAt is similar to partition in clojure
splitAt 3 [1,2,3,4,5,6] => ([1,2,3], [4,5,6])

null [] => True 

example of using | and avoid using if/then/else
safetail xs
 | null xs = []
 | otherwise = tail xs

note: these branch conditions are evaluated in order, so if the expression 'null xs ....' goes after the 'otherwise ...', it means a differently behaving function

example of lambda
safetail
 = \ xs ->
     case xs of
      [] -> []

another example
multi x y z = x*y*z 
can be expressed as
mult = \x -> (\y -> (\z -> x * y * z))


'f x g y' means ((f x) g) y

example of a 'generator'
[x^2  |  x <- [1..5] ]   => [1,4,9,16,25]

example of a dependant generator
... | x <- [1..3],  y <- [x..3] ...

another more 'complicated' example
concat xss = [x | xs <- xss, x <- xs ]
ex. concat [[1,2],  [3,4,5]]  ==> [1,2,3,4,5]

using 'guards'
[x  | x <- [1..10],  even x ]


